#modelDown!!!!

#MY EXAMPLE

# Prepare the data
head(Game_by_Game_Data)

GameDataX <- Game_by_Game_Data[, -c(1,2,4)]
GameDataX <- na.omit(GameDataX)

GameDataY <- GameDataX[, 40]
GameDataX <- GameDataX[, -40]

GameDataX <- as.matrix(GameDataX)
GameDataY <- as.matrix(GameDataY)

# Random Forest model
library("randomForest")

rf.model <- randomForest(GameDataY ~ .,  data = GameDataX, na.action = na.omit)

explain.rf <- explain(rf.model, data = GameDataX,
                              y = GameDataY, 
                              label = "Random Forest v7")

# SVM model
library("e1071")

svm.model <- svm(GameDataY ~ ., data = GameDataY, 
                         type = "eps-regression", na.action = na.omit)

explain.svm <- explain(svm.model, data = GameDataX, 
                               y = GameDataY, 
                               label = "Support Vector Machines")

# GBM model (this doesn't work for some reason)
library("gbm")

GameDatagbm <- as.data.frame(Game_by_Game_Data[, -c(1,2,4)])
GameDatagbm <- na.omit(GameDatagbm)

gbm1 <- gbm(GameDatagbm$RE24hit ~ ., data = GameDatagbm,
            distribution = "gaussian", n.trees = 100, shrinkage = 0.1,             
            interaction.depth = 3, bag.fraction = 0.5, train.fraction = 0.5,  
            n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE, 
            verbose = FALSE)  

explain.gbm1 <- explain(gbm1, data = GameDataX, 
                               y = GameDataY, 
                               predict_function = function(m,x) predict(m, x, n.trees = 100, type = "regression"),
                               label = "Generalized Boosted Models")

# OLS

ols.model <- lm(GameDatagbm$RE24hit ~ ., data = GameDatagbm, na.action = na.omit)

explain.ols <- explain(ols.model, data = GameDataX, 
                               y = GameDataY, 
                               predict_function = function(m,x) predict(m, x)[,2],
                               label = "OLS")


# Website generation
library(modelDown)

lol <- modelDown(explain.rf, explain.gbm1, 
          explain.svm, explain.ols,
          device = "svg",
          remote_repository_path = "???",
          output_folder = "???")


#ORIGINAL EXAMPLE

# Prepare the data
library("DALEX")
titanic <- na.omit(titanic)

# Random Forest model
library("randomForest")
model_titanic_rf <- randomForest(survived == "yes" ~ gender + age + class + embarked +
                                   fare + sibsp + parch,  data = titanic[,-5])
explain_titanic_rf <- explain(model_titanic_rf, 
                              data = titanic[,-c(9,5)],
                              y = titanic$survived == "yes", 
                              label = "Random Forest v7")

# SVM model
library("e1071")
model_titanic_svm <- svm(survived == "yes" ~ class + gender + age + sibsp +
                           parch + fare + embarked, data = titanic[,-5], 
                         type = "C-classification", probability = TRUE)
explain_titanic_svm <- explain(model_titanic_svm, data = titanic[,-c(9,5)], 
                               y = titanic$survived == "yes", 
                               label = "Support Vector Machines")

# GBM model
library("gbm")
model_titanic_gbm <- gbm(survived == "yes" ~ class + gender + age + sibsp +
                           parch + fare + embarked, data = titanic[,-5], n.trees = 15000)
explain_titanic_gbm <- explain(model_titanic_gbm, data = titanic[,-c(9,5)], 
                               y = titanic$survived == "yes", 
                               predict_function = function(m,x) predict(m, x, n.trees = 15000, type = "response"),
                               label = "Generalized Boosted Models")

# k-NN model

library("caret")
model_titanic_knn <- knn3(survived == "yes" ~ class + gender + age + sibsp +
                            parch + fare + embarked, data = titanic[,-5], k = 5)
explain_titanic_knn <- explain(model_titanic_knn, data = titanic[,-c(9,5)], 
                               y = titanic$survived == "yes", 
                               predict_function = function(m,x) predict(m, x)[,2],
                               label = "k-Nearest Neighbours")


# Website generation
modelDown(explain_titanic_rf, explain_titanic_gbm, 
          explain_titanic_svm, explain_titanic_knn,
          device = "svg",
          remote_repository_path = "MI2DataLab/modelDown_example/docs",
          output_folder = "modelDown_Titanic_example")
